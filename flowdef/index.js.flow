// @flow
// tslint:disable

import type {
  PluginId,
  IPlugin,
  IPluginContext,
  IPluginDef,
  IPluginApi as IVanillaPluginApi,
} from 'ui-plugin';

type Renderable<ComponentProps> =
  | React$ComponentType<ComponentProps>
  | React$Element<any>
  | string;

type IRenderableWithProps<PluginConfig: {}, PluginState, ComponentProps: {}> = {
  render: Renderable<$Shape<ComponentProps & { children: React$Node }>>,
  getProps?: GetProps<PluginConfig, PluginState, ComponentProps>,
};

type GetProps<
  PluginConfig: {} = any,
  PluginState = any,
  ComponentProps: {} = any,
> = (
  context: IPluginContext<PluginConfig, PluginState>,
  slotProps: { [key: string]: any },
) => ComponentProps;

type IPlugDef<
  PluginConfig: {},
  PluginState,
  ComponentProps: {},
> = IRenderableWithProps<PluginConfig, PluginState, ComponentProps> & {
  slotName: string,
};

type IPluginApi<PluginConfig: {}, PluginState> = IVanillaPluginApi<
  PluginConfig,
  PluginState,
> & {
  plug: <ComponentProps: {}>(
    plugDef: IPlugDef<PluginConfig, PluginState, ComponentProps>,
  ) => void,
};

export type { IPlugin, IPluginContext } from 'ui-plugin';

declare export function resetPlugins(): void;

declare export function getPluginApi<PluginConfig: {}, PluginState>(
  pluginId: PluginId,
): IPluginApi<PluginConfig, PluginState>;

declare export function registerPlugin<PluginConfig: {}, PluginState>(
  pluginDef: IPluginDef<PluginConfig, PluginState>,
): IPluginApi<PluginConfig, PluginState>;

declare export var Slot: React$ComponentType<{
  name: string,
  children?: React$Node,
  props?: {},
}>;

declare export var PluginsConsumer: React$ComponentType<{
  children: (props: {
    plugins: IPlugin[],
    enable: (pluginId: PluginId, enabled: boolean) => void,
    isShadowed: (pluginId: PluginId) => boolean,
  }) => React$Node,
}>;

declare export {
  enablePlugin,
  getPlugins,
  getPluginContext,
  loadPlugins,
  onStateChange,
} from 'ui-plugin';
